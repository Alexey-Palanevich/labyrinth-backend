# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile
      target: ${ENVIRONMENT}
    env_file:
      - .env
    ports:
      - ${PORT}:${PORT}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    networks:
      my-network:

  db:
    container_name: db
    image: mongo:7.0.2
    restart: always
    ports:
      - ${MONGO_DB_PORT}:27017
    volumes:
      - db-data:/data/db
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_NON_ROOT_USERNAME: ${MONGO_NON_ROOT_USERNAME}
      MONGO_NON_ROOT_PASSWORD: ${MONGO_NON_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      my-network:

volumes:
  db-data:

networks:
  my-network:
    driver: bridge
    name: dockernet
    ipam:
      config:
        - subnet: 172.29.0.0/16
          gateway: 172.29.0.1
